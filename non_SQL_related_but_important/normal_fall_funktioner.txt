Hotelldirektör:
    Skicka erbjudanden via mejl
        - viz. hitta mejl addresser till kunder, med namn och dylikt
        - viz. hitta/skapa erbjudanden. 


    [D]Lägga in erbjudandens giltighetstid
        ** enkel
        - viz. update
    *** SQL::::
        update erbjudande 
        SET start = {startdatum}, slut = {startdatum}
        WHERE erbjudande_id = {X}
        ** EXAMPLE QUERY:
                update erbjudande 
                SET start = '2024-10-15 00:00:00', slut = '2024-11-15 23:59:59'
                WHERE erbjudande_id = 1
    

    Statistik på vilken typ av rum som är attraktiva en viss period
        - först definera perioden <- input
        - bokning: lista över incheckning som faller inom denna tidsram.
        -> ta fram rum därifrån.
        -> från rum hitta rumtyp, räkna  (count) antal av varje rumtyp. 


    [D]Se när det är middag bokad och för hur många personer 
        - SELECT X, y from middag. (order by date)
        ** EXAMPLE QUERY:
        SELECT datum, antal_personer, grupp_bokning_id FROM middag 
        ORDER BY datum;


    [D]Uppdatera hur många personer som ska äta
        ** enkel
        - update statement
        *** SQL::::
        update middag
        SET antal_personer = {X}
        WHERE middag_id = {Y}
        ** EXAMPLE QUERY:
        -- usecase example: en person har blivit sjuk och ska inte vara med på middagen men sova i rummet.
        update middag
        SET antal_personer = antal_personer - 1
        WHERE middag_id = 1




Receptionist:
    Se lediga rum av en viss typ en viss tidsperiod, 
        viz. en kund vill boka ett enkelrum
        -> gå in i bokning, gå in och kolla all data, ta bort träffar där någon av dagarna
        inom tidsperioden har träff mellan ett derivade value som utgår ifrån:
            -> checkatin och checkatut ==> tabell med datum upptaget. 
            hämta alla rum_id som ej ej har träffar där.
        -> ta upp lista ur "join" från rum och rum_typ där rum id är från förra steget.
        -> skapa ny lista utifrån "join" med den rumtypen man söker och de rum som uppfyller kraven.
    Boka rum  <<<<
        ***Går vidare från förra steget ovan***
        gå in bokning med valt rum_id från förra steget, updatera/insert bokning. 
            updatera/insert kund´
            updatera/insert huvud_gäst
            updatera/insert faktura
                *** tänk på ordningen av operationer här: vilken tabell i vilken ordning? "Insert order per build1.txt"
    Boka rum för grupp <<<<
        göra fina ritningen. 


    [D]Boka middag för grupp
        *** relativt enkel *** 
        gå via gruppbokning till middag, lägg in nytt objekt i middag och uppdatera fältet för foreign key till den gruppbokningen det gäller.
        ** EXAMPLE QUERY:
        INSERT INTO middag (grupp_bokning_id, antal_personer, datum) VALUES (1, 8, '2025-01-20 18:00:00');
    
    
    Se aktuella priser och erbjudanden: för att få reda på bokningskostad för kund.
        Kolla pris för visst typ av rum. 
        eventuella erbjudanden som är aktuella för sagt rum. 
        ** motivera i rapport varför vi ej substraherar här. Ta med vilkoren i rapporten och hur vi tänkt där.
        --> lista med pris för rummet samt aktuella erbjudanden (med villkoren). 
    Se pris / erbjudande som gällde när bokningen gjordes; som gäller för fakturan. detta är för debiteringen i slutet.
        Gå via bokning till faktura -> Kolla om det finns erbjudande i faktura
        Kontrollera bokningsdatum
            Söka i rum_pris efter det pris för rumtypen som var aktuellt när bokningen gjordes, derived value som utgår ifrån:
                -> rum_pris.start -> rum_pris.slut 
            ** På samma sätt som vi söker efter ledigt rum
    Checka in (huvud)gäster
        ** Kan ske både med gästens namn / telefonnummer och med boknings-id
        Söka fram rummet som hör till bokningen 
            -> Kontrollera att rummet är utcheckat
            -> Uppdatera checked_in till TRUE  (och checked_out till FALSE) 
    Checka ut (huvud)gäster
        ** Kan ske både med gästens namn / telefonnummer och med boknings-id
        Söka fram rummet som hör till bokningen 
            -> Kontrollera att rummet är incheckat
            -> Uppdatera checked_in till FALSE  (och checked_out till TRUE) 
    Se om gäst checkat in
        Gå från huvud_gast -> bokning -> rum
            Kontrollera om checkat_in == TRUE
    Se om gäst checkat ut
        Gå från huvud_gast -> bokning -> rum
            Kontrollera om checkat_ut == TRUE


    [D]Se vem i personalen som gjort bokning 
        Selectsats med sökning i bokning samt personal
        *** SQL QUERY:::
            SELECT personal.fornamn, personal.efternamn, bokning.bokning_id, personal.personal_id
            FROM personal
            INNER JOIN bokning ON personal.personal_id = bokning.personal_id;

    
    Ändra datum i bokningar
        Updatesats i bokning.incheck och/eller bokning.utcheck
        *** SQL QUERY:::
            UPDATE bokning SET incheckning = '2024-12-01', utcheckning = '2024-12-15'
            WHERE bokning_id = 1;
    Skriva ut räkning för bokningar / gruppbokningar
        Räkna ut totalpris per kund för specifik bokning / gruppbokning
        Betalnings-spec/kvitto?

Städare:
    Se vilka rum som är utcheckade
        Relativt enkel select-sats
        *** SQL QUERY:::
        SELECT rum_id, `status`, rum_typ_id  FROM rum 
        WHERE `status` = 'checkat_ut';

Från handledare.
SELECT, UPDATE OCH INSERT SKA VARA MED.
minst tre av SQL satserna ska göra en sökning i flera tabeller, 
visa på både JOIN och NESTAD
använd minst en funktion t.ex. count eller group by.